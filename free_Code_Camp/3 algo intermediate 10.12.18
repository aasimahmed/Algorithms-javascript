
Description
We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them.

The lowest number will not always come first.

Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.

function sumAll(arr) {
var total = 0;
if(arr[1] > arr[0]){

for(var i = arr[0]; i<=arr[1]; i++){
total +=i;
}}else{

for(var i = arr[1]; i <= arr[0]; i++){
total+=i;
}
}
return total
}
sumAll([1, 4]);

------------------------------------------------------------------------------
Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.

Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.

Note
You can return the array with its elements in any order.

function diffArray(arr1, arr2) {
var newArr = [];
arr1.forEach(function(num){
if(arr2.indexOf(num) === -1)
newArr.push(num);
})
arr2.forEach(function(num){
if(arr1.indexOf(num) === -1){
newArr.push(num);
}})

return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

----------------------------------

You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.

Note
You have to use the arguments object.

Remember to use Read-Search-Ask if you get stuck. Write your own code.

function destroyer(arr) {
for(var i =0; i<arguments.length; i++){
if(arr.indexOf(arguments[i]) !== -1){
arr.splice(arr.indexOf(arguments[i]), 1)
i--;
}
}
return arr;
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);

==================================================

Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.

For example, if the first argument is [{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], and the second argument is { last: "Capulet" }, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.

Remember to use Read-Search-Ask if you get stuck. Write your own code.

Todays intermediate algorithm allowances for certain things:
1) If object contained another object it would not work, as both are different objects in memory
type comparison is also not factored in i.e REGEXP/Null/Undefined
2) If we wanted to deep copy we would need a more robust input/test/output as we are comparing objects.

function whatIsInAName(collection, source) {
// What's in a name?
var arr = [];
collection.forEach(function(num){ // num refers to current object we are on
var objectKeys = Object.keys(num);
var objectKeysLength = objectKeys.length;
var sourceKeys = Object.keys(source);
var counter = 0;
for(var prop in num){
if(num[prop] === source[prop]){
counter ++;
}
}
if (counter === sourceKeys.length){
arr.push(num);
}
// Only change code above this line

})
return arr;}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

//function WhatsIsInAName(collection, source) {

//LOGIC
//Loop throuh array of objects, loop through each object done
//check length of current obj we are on using obj.keys done
// loop through and have a counter if key in source is present, and if obj.key has same value
//if it does add one, then compare is obj.keys.length is equal to counter.
// if it is then push that object to return array.
